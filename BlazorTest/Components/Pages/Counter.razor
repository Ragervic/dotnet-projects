@page "/counter"
@rendermode InteractiveServer

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="() => currentCount++">Click me</button>

@* ONINPUT *@
<div>
    <input type="text" name="name" @oninput="HandleInput" />
    <p role="status">  @text</p>
</div>
@* @BIND *@
<div>
    <input type="text" name="name" @bind="text" @bind:event="HandleInput" @bind:after="Search" />
    <p role="status">  @text</p>
    <p>@Result</p>
</div>

@* ONFOCUS and ONBLUR *@
<div>
    <input type="text" name="name"  @onfocus="HandleFocus" @onblur="HandleBlur"/>
    <p role="status"> @text</p>
</div>

@* ONKEYDOWN *@
<div>
    <input type="text" name="name"  @onkeydown="HandleKeyDown" />
    <p role="status">  @text</p>
</div>

@* ONMOUSEOVER *@
<div style="border: 1px solid black" @onmouseover="MouseOver">
    <p>@divText</p>
</div>


@code {
    private int currentCount = 0;
    public string text = "";
    public string? divText;
    public string? Result = "";

    [Parameter]
    public int IncrementAmount { get; set; } = 2;

    private void IncrementCount()
    {
        currentCount += IncrementAmount;
    }

    private void HandleInput(ChangeEventArgs e)
    {
        text = (string)e.Value!;
    }
    private void MouseOver(MouseEventArgs e)
    {
        divText = "On Hover event handler function";
    }
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        text = e.Key;
    }
    private void HandleFocus(FocusEventArgs args)
    {
        text = "You're focused on the input field";
    }
    private void HandleBlur(FocusEventArgs args)
    {
        text = "You're blurred on the input field";
    }
    private async Task Search()
    {
        await Task.Delay(3000);
        Result = $"You searched for: {text}";
        throw new NotImplementedException();
    }
}